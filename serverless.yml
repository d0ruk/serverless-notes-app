frameworkVersion: ">=1.2.0 <2.0.0"

service: notes

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "eu-central-1"}
  environment:
    TABLE_NAME: ${self:custom.tableName}

  iamRoleStatements:
    -
      Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:${self:provider.stage}:*:*"

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: handler.get
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: handler.list
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: handler.update
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: handler.delete
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  Resources:
    NotesTable:
      $ref: ./resources/notes-table.yml
    # IdentityPool:
    #   $ref: ./resources/identity-pool.yml
    # UserPoolClient:
    #   $ref: ./resources/user-pool-client.yml
    # UserPool:
    #   $ref: ./resources/user-pool.yml
  Outputs:
    NotesTableName:
      Value:
        Ref: NotesTable
      Export:
        Name: NotesTableName
    Region:
      Value: ${self:provider.region}

plugins:
  - serverless-webpack
  - serverless-stack-output

custom:
  webpackIncludeModules: true
  tableName: ${self:service}-table
  userPoolName: user-pool-${self:service}-${self:provider.stage}
  clientName: ${file(./package.json):name}
  identityPoolName: identity-pool-${self:service}-${self:provider.stage}
  output:
    file: ./output.json
