frameworkVersion: ">=1.2.0 <2.0.0"

service: notes

plugins:
  - serverless-webpack
  - serverless-stack-output

custom:
  webpackIncludeModules: true
  tableName: ${self:service}-table
  userPoolName: user-pool-${self:service}-${self:provider.stage}
  clientName: ${file(./package.json):name}
  identityPoolName: identity-pool-${self:service}-${self:provider.stage}
  output:
    file: ./output.json

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, "dev"}
  region: ${opt:region, "eu-central-1"}
  environment:
    TABLE_NAME: ${self:custom.tableName}

  iamRoleStatements:
    -
      Effect: Allow
      Action:
        - dynamodb:*
      Resource: "arn:aws:dynamodb:${self:provider.stage}:*:*"

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam
  get:
    handler: handler.get
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    handler: handler.list
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam
  update:
    handler: handler.update
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    handler: handler.delete
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  Resources:
    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          -
            AttributeName: noteId
            AttributeType: S
          -
            AttributeName: userId
            AttributeType: S
        KeySchema:
          -
            AttributeName: userId
            KeyType: HASH
          -
            AttributeName: noteId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    # UserPoolClient:
    #   Type: AWS::Cognito::UserPoolClient
    #   Properties:
    #     ClientName: ${self:custom.clientName}
    #     UserPoolId:
    #       Ref: UserPool
    #     GenerateSecret: false
    # UserPool:
    #   Type: AWS::Cognito::UserPool
    #   Properties:
    #     UserPoolName: ${self:custom.userPoolName}
    #     # MfaConfiguration: ON
    #     AliasAttributes:
    #       - email
    #     AutoVerifiedAttributes:
    #       - email
    #     EmailVerificationMessage: Onay kodu {####}.
    #     EmailVerificationSubject: \[${self:custom.clientName}\] Onay
    # IdentityPool:
    #   Type: AWS::Cognito::IdentityPool
    #   Properties:
    #     IdentityPoolName: ${self:custom.identityPoolName}
    #     # AllowUnauthenticatedIdentities: true
    #     CognitoIdentityProviders:
    #       -
    #         ClientId:
    #           Ref: UserPoolClient
    #         ProviderName:
    #           Fn::GetAtt: [ UserPool, ProviderName ]
  Outputs:
    NotesTableName:
      Value:
        Ref: NotesTable
      Export:
        Name: NotesTableName
    Region:
      Value: ${self:provider.region}
