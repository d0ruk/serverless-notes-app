frameworkVersion: ">=1.2.0 <2.0.0"

service: notes

provider:
  name: aws
  runtime: nodejs6.10
  stage: ${opt:stage, "dev"}
  # endpointType: regional
  region: ${opt:region, "eu-west-1"}
  memorySize: 256
  environment:
    TABLE_NAME: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource: arn:aws:dynamodb:${self:provider.region}:*:*

functions:
  create:
    handler: handler.create
    events:
      - http:
          path: notes
          method: POST
          cors: true
          authorizer: aws_iam
  get:
    handler: handler.get
    events:
      - http:
          path: notes/{id}
          method: GET
          cors: true
          authorizer: aws_iam
  list:
    handler: handler.list
    events:
      - http:
          path: notes
          method: GET
          cors: true
          authorizer: aws_iam
  update:
    handler: handler.update
    events:
      - http:
          path: notes/{id}
          method: PUT
          cors: true
          authorizer: aws_iam
  delete:
    handler: handler.delete
    events:
      - http:
          path: notes/{id}
          method: DELETE
          cors: true
          authorizer: aws_iam

resources:
  Description: ${self:service} stack
  Resources:
    NotesTable:
      $ref: ./resources/notes-table.yml
    IdentityPool:
      $ref: ./resources/identity-pool.yml
    UserPoolClient:
      $ref: ./resources/user-pool-client.yml
    UserPool:
      $ref: ./resources/user-pool.yml
    CognitoAuthorizedRole:
      $ref: ./resources/authorized-role.yml
    CognitoUnAuthorizedRole:
      $ref: ./resources/unauthorized-role.yml
    CognitoRoleMapping:
      $ref: ./resources/role-mapping.yml
    AttachmentsBucket:
      $ref: ./resources/attachments-bucket.yml
  Outputs:
      $ref: ./resources/outputs.yml

plugins:
  - serverless-webpack
  - serverless-stack-output
  # - serverless-s3-remover

custom:
  webpackIncludeModules:
    forceExclude:
      - aws-sdk
  prefix: ${self:service}-${self:provider.stage}-${self:provider.region}
  tableName: ${self:custom.prefix}-table
  bucketName: ${self:custom.prefix}-attachments-bucket
  userPoolName: ${self:custom.prefix}-userpool
  identityPoolName: ${self:service}_${self:provider.stage}_identitypool
  clientName: ${self:custom.prefix}-${file(./package.json):name}
  output:
    file: ./output.json
  remover:
    prompt: true
    buckets:
      - ${self:custom.bucketName}