frameworkVersion: ">=1.2.0 <2.0.0"

service:
  name: notes
  publish: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, "dev"}
  # endpointType: regional
  region: ${opt:region, "eu-west-1"}
  memorySize: 256
  timeout: 10
  environment:
    TableName: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]
  stackTags:
    REGION: ${self:provider.region}
    RUNTIME: ${self:provider.runtime}

functions:
  create:
    name: ${self:custom.prefix}-createFn
    description: Create a new Note
    handler: handler.create
    events:
      - http:
          path: notes
          method: POST
          cors: true
          authorizer: aws_iam
  get:
    name: ${self:custom.prefix}-getFn
    description: Get details for a Note by id
    handler: handler.get
    events:
      - http:
          path: notes/{id}
          method: GET
          cors: true
          authorizer: aws_iam
  list:
    name: ${self:custom.prefix}-listFn
    description: List all Notes belonging to the user
    handler: handler.list
    events:
      - http:
          path: notes
          method: GET
          cors: true
          authorizer: aws_iam
  update:
    name: ${self:custom.prefix}-updateFn
    description: Update a Note by id
    handler: handler.update
    events:
      - http:
          path: notes/{id}
          method: PUT
          cors: true
          authorizer: aws_iam
  delete:
    name: ${self:custom.prefix}-deleteFn
    description: Delete a specific Note
    handler: handler.delete
    events:
      - http:
          path: notes/{id}
          method: DELETE
          cors: true
          authorizer: aws_iam

resources:
  Description: ${self:service.name} stack
  Resources:
    NotesTable: ${file(resources/notes-table.yml)}
    IdentityPool: ${file(resources/identity-pool.yml)}
    UserPoolClient: ${file(resources/user-pool-client.yml)}
    UserPool: ${file(resources/user-pool.yml)}
    CognitoAuthorizedRole: ${file(resources/authorized-role.yml)}
    CognitoUnAuthorizedRole: ${file(resources/unauthorized-role.yml)}
    CognitoRoleMapping: ${file(resources/role-mapping.yml)}
    AttachmentsBucket: ${file(resources/attachments-bucket.yml)}
  Outputs: ${file(resources/outputs.yml)}

plugins:
  - serverless-webpack
  - serverless-stack-output

package:
  individually: true

custom:
  webpack:
    packager: yarn
    includeModules:
      forceExclude:
        - aws-sdk
  prefix: ${self:service}-${self:provider.stage}-${sls:instanceId}
  tableName: ${self:custom.prefix}-table
  bucketName: ${self:custom.prefix}-attachments-bucket
  userPoolName: ${self:custom.prefix}-userpool
  identityPoolName: ${self:service}_${self:provider.stage}_identitypool
  clientName: ${self:custom.prefix}-${file(./package.json):name}
  output:
    file: ./output.json
